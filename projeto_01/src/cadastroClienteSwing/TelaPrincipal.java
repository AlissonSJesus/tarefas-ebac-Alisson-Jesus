/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cadastroClienteSwing;

import cadastroClienteSwing.dao.ClientDAO;
import cadastroClienteSwing.dao.ClientMapDAO;
import cadastroClienteSwing.domain.Client;
import cadastroClienteSwing.domain.Client.Adress;
import java.util.Objects;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class TelaPrincipal extends javax.swing.JFrame {

    private DefaultTableModel modelo = new DefaultTableModel();
    private ClientDAO clientDao = new ClientMapDAO();

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelName = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        labelCpf = new javax.swing.JLabel();
        cpf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        phone = new javax.swing.JTextField();
        labelTelefone = new javax.swing.JLabel();
        labelNeighborhood = new javax.swing.JLabel();
        neighborhood = new javax.swing.JTextField();
        reset = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        labelCity = new javax.swing.JLabel();
        city = new javax.swing.JTextField();
        labelStreet = new javax.swing.JLabel();
        street = new javax.swing.JTextField();
        labelState = new javax.swing.JLabel();
        state = new javax.swing.JTextField();
        put = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuItemSair = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelName.setText("Nome");

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        save.setText("Salvar");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        labelCpf.setText("CPF");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        labelTelefone.setText("Telefone");

        labelNeighborhood.setText("Bairro");

        neighborhood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neighborhoodActionPerformed(evt);
            }
        });

        reset.setText("Limpar");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        delete.setText("Excluir");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        labelCity.setText("Cidade");

        labelStreet.setText("Rua");

        labelState.setText("Estado");

        put.setText("Atualizar");
        put.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                putActionPerformed(evt);
            }
        });

        menuItemSair.setText("Opções");
        menuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSairActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Sair");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuItemSair.add(jMenuItem1);

        jMenuBar1.add(menuItemSair);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelStreet)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(labelName)
                            .addGap(18, 18, 18)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(save)
                            .addGap(18, 18, 18)
                            .addComponent(reset)
                            .addGap(18, 18, 18)
                            .addComponent(delete)
                            .addGap(18, 18, 18)
                            .addComponent(put))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelCpf)
                                .addComponent(labelNeighborhood))
                            .addGap(20, 20, 20)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cpf, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(neighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelTelefone)
                                        .addComponent(labelCity)))
                                .addComponent(street, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(labelState)
                                    .addGap(18, 18, 18)
                                    .addComponent(state))
                                .addComponent(phone)
                                .addComponent(city)))))
                .addContainerGap(717, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelName)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTelefone)
                    .addComponent(labelCpf))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(neighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNeighborhood)
                    .addComponent(labelCity)
                    .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStreet)
                    .addComponent(street, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelState)
                    .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(reset)
                    .addComponent(delete)
                    .addComponent(put))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int close = JOptionPane.showConfirmDialog(this,
                "Deseja sair da aplicação?",
                "Sair",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (close == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSairActionPerformed
        //DO NOT code here. This method is not abled
        //DO NOT CODE HERE
        //DO NOT CODE HERE
    }//GEN-LAST:event_menuItemSairActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        //DO NOT code here. This method is not abled
        //DO NOT CODE HERE
        //DO NOT CODE HERE
    }//GEN-LAST:event_nameActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        String[] campos = new String[7];

        Boolean isNameFilled = false;
        Boolean isCpfFilled = false;
        Boolean isPhoneFilled = false;
        Boolean isNeighborhood = false;
        Boolean isCity = false;
        Boolean isStreet = false;
        Boolean isState = false;

        String campoNome = labelName.getText() + "," + name.getText();
        String campoCpf = labelCpf.getText() + "," + cpf.getText();
        String campoTelefone = labelTelefone.getText() + "," + phone.getText();
        String campoBairro = labelNeighborhood.getText() + "," + neighborhood.getText();
        String campoCidade = labelCity.getText() + "," + city.getText();
        String campoRua = labelStreet.getText() + "," + street.getText();
        String campoEstado = labelState.getText() + "," + state.getText();

        campos[0] = campoNome;
        campos[1] = campoCpf;
        campos[2] = campoTelefone;
        campos[3] = campoBairro;
        campos[4] = campoCidade;
        campos[5] = campoRua;
        campos[6] = campoEstado;

        for (int i = 0; i < campos.length; i++) {
            var input = campos[i].split(",");

            if (input[0].equals("Nome") && input.length < 2) {
                JOptionPane.showMessageDialog(null, "Campo " + "'" + input[0] + "'" + " é obrigatório", "Mensagem",
                        JOptionPane.INFORMATION_MESSAGE);
            } else if (input[0].equals("CPF") && input.length < 2) {
                JOptionPane.showMessageDialog(null, "Campo " + "'" + input[0] + "'" + " é obrigatório", "Mensagem",
                        JOptionPane.INFORMATION_MESSAGE);
            } else if (input[0].equals("Telefone") && input.length < 2) {
                JOptionPane.showMessageDialog(null, "Campo " + "'" + input[0] + "'" + " é obrigatório", "Mensagem",
                        JOptionPane.INFORMATION_MESSAGE);
            } else if (input[0].equals("Bairro") && input.length < 2) {
                JOptionPane.showMessageDialog(null, "Campo " + "'" + input[0] + "'" + " é obrigatório", "Mensagem",
                        JOptionPane.INFORMATION_MESSAGE);
            } else if (input[0].equals("Cidade") && input.length < 2) {
                JOptionPane.showMessageDialog(null, "Campo " + "'" + input[0] + "'" + " é obrigatório", "Mensagem",
                        JOptionPane.INFORMATION_MESSAGE);
            } else if (input[0].equals("Rua") && input.length < 2) {
                JOptionPane.showMessageDialog(null, "Campo " + "'" + input[0] + "'" + " é obrigatório", "Mensagem",
                        JOptionPane.INFORMATION_MESSAGE);
            } else if (input[0].equals("Estado") && input.length < 2) {
                JOptionPane.showMessageDialog(null, "Campo " + "'" + input[0] + "'" + " é obrigatório", "Mensagem",
                        JOptionPane.INFORMATION_MESSAGE);
            }

            if (i == 0 && input.length == 2) {
                isNameFilled = true;
            }

            if (i == 1 && input.length == 2) {
                isCpfFilled = true;
            }

            if (i == 2 && input.length == 2) {
                isPhoneFilled = true;
            }

            if (i == 3 && input.length == 2) {
                isNeighborhood = true;
            }

            if (i == 4 && input.length == 2) {
                isCity = true;
            }

            if (i == 5 && input.length == 2) {
                isStreet = true;
            }

            if (i == 6 && input.length == 2) {
                isState = true;
            }
        }

        if (isCpfFilled == true && isNameFilled == true && isPhoneFilled == true && isNeighborhood == true && isCity == true && isStreet == true && isState == true) {
            Client client = new Client();
            Client.Adress iAdress = new Client.Adress();

            client.setName(name.getText());
            client.setCpf(Long.valueOf(cpf.getText().trim()));
            client.setPhone(Long.valueOf(phone.getText().trim()));

            iAdress.setNeighborhood(neighborhood.getText());
            iAdress.setCity(city.getText());
            iAdress.setState(state.getText());
            iAdress.setStreet(street.getText());
            client.setAdress(iAdress);

            clientDao.post(client);

            JOptionPane.showMessageDialog(null, "Usuário Cadastrado!", "Mensagem",
                    JOptionPane.INFORMATION_MESSAGE);

            modelo.addRow(new Object[]{client.getName(), client.getCpf(), client.getPhone(), iAdress.getNeighborhood(), iAdress.getCity(), iAdress.getStreet(), iAdress.getState()});
        }
    }//GEN-LAST:event_saveActionPerformed

    private void neighborhoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neighborhoodActionPerformed
        //DO NOT code here. This method is not abled
        //DO NOT CODE HERE
        //DO NOT CODE HERE
    }//GEN-LAST:event_neighborhoodActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        name.setText("");
        cpf.setText("");
        phone.setText("");
        neighborhood.setText("");
        city.setText("");
        street.setText("");
        state.setText("");
    }//GEN-LAST:event_resetActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int selectedRow = table.getSelectedRow();

        Long selectedCpf = (Long) table.getValueAt(selectedRow, 1);

        Client client = this.clientDao.get(selectedCpf);

        name.setText(client.getName());
        cpf.setText(client.getCpf().toString());
        phone.setText(client.getPhone().toString());
        neighborhood.setText(Adress.neighborhood);
        city.setText(Adress.city);
        street.setText(Adress.street);
        state.setText(Adress.state);
    }//GEN-LAST:event_tableMouseClicked

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int selectedRow = table.getSelectedRow();

        if (selectedRow >= 0) {
            int remove = JOptionPane.showConfirmDialog(this,
                    "Deseja excluir dados do cliente?",
                    "Remover",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (remove == JOptionPane.YES_OPTION) {
                Long selectedCpf = (Long) table.getValueAt(selectedRow, 1);

                clientDao.delete(selectedCpf);

                modelo.removeRow(selectedRow);

                JOptionPane.showMessageDialog(null, "Usuário removido com sucesso!", "Mensagem",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nenhum cliente selecionado.", "Erro",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void putActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_putActionPerformed
        int selectedRow = table.getSelectedRow();

        if (selectedRow >= 0) {
            Long selectedCpf = (Long) table.getValueAt(selectedRow, 1);

            Client client = this.clientDao.get(selectedCpf);
            Client.Adress iAdress = new Client.Adress();
            
            client.setName(name.getText());
            client.setCpf(Long.valueOf(cpf.getText().trim()));
            client.setPhone(Long.valueOf(phone.getText().trim()));

            iAdress.setNeighborhood(neighborhood.getText());
            iAdress.setCity(city.getText());
            iAdress.setState(state.getText());
            iAdress.setStreet(street.getText());
            client.setAdress(iAdress);

            if (!Objects.equals(selectedCpf, Long.valueOf(cpf.getText().trim()))) {
                JOptionPane.showMessageDialog(null, "CPF não pode ser editado!", "Erro",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                clientDao.put(client);
                
                modelo.removeRow(selectedRow);

                modelo.addRow(new Object[]{client.getName(), client.getCpf(), client.getPhone(), iAdress.getNeighborhood(), iAdress.getCity(), iAdress.getStreet(), iAdress.getState()});
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nenhum cliente selecionado.", "Erro",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_putActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField city;
    private javax.swing.JTextField cpf;
    private javax.swing.JButton delete;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCity;
    private javax.swing.JLabel labelCpf;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelNeighborhood;
    private javax.swing.JLabel labelState;
    private javax.swing.JLabel labelStreet;
    private javax.swing.JLabel labelTelefone;
    private javax.swing.JMenu menuItemSair;
    private javax.swing.JTextField name;
    private javax.swing.JTextField neighborhood;
    private javax.swing.JTextField phone;
    private javax.swing.JButton put;
    private javax.swing.JButton reset;
    private javax.swing.JButton save;
    private javax.swing.JTextField state;
    private javax.swing.JTextField street;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private void initCustomComponents() {
        modelo.addColumn("Nome");
        modelo.addColumn("Cpf");
        modelo.addColumn("Telefone");
        modelo.addColumn("Bairro");
        modelo.addColumn("Cidade");
        modelo.addColumn("Rua");
        modelo.addColumn("Estado");

        table.setModel(modelo);
    }
}
